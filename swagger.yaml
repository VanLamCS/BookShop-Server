swagger: "2.0"
info:
  title: BookShop APIs Document
  description: BookShop APIs document.
  version: 1.0.0
  contact:
    email: vanlam.cs76@gmail.com
  servers:
    - url: "http://localhost:5000/"
      scheme: http
      description: Local server
host: localhost:5000
basePath: /api
schemes:
  - http

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: Enter your JWT token to authenticate your requests. `Bearer <token>`

consumes:
  - application/json
produces:
  - application/json


paths:
  # User
  /user:
    post:
      tags:
        - User
      summary: Register on the system
      description: Returns information about your account and an access token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User information
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Your name
                required: true
              email:
                type: string
                description: Your email
                required: true
              phone:
                type: string
                description: Your phone number
                required: true
              password:
                type: string
                description: Your password
                required: true
              confirmPassword:
                type: string
                description: Re-enter your password
                required: true
      responses:
        "201":
          description: Register successfully
          schema:
            type: object
            properties:
              _id:
                type: string
                description: Your accout ID on the system
              name:
                type: string
                description: Your name
              email:
                type: string
                description: Your email
              phone:
                type: string
                description: Your phone number
              role:
                type: string
                description: Your role on the system. Default is 'customer'
              token:
                type: string
                description: Your access token 
        "400":
          description: Error with message
  
  /user/login:
    post:
      tags:
        - User
      summary: Login to the system
      description: Returns some values and an access token for the user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: User email
              password:
                type: string
                description: User password
      responses:
        "200":
          description: Login successful
          schema:
            type: object
            properties:
              _id:
                type: string
                description: Your account ID in the system
              name:
                type: string
                description: Your name
              email:
                type: string
                description: Your email
              avatar:
                type: string
                description: Your profile picture url
              role: 
                type: string
                description: Your role in system. Default is 'customer'
              token:
                type: string
                description: Your access token
        "400":
          description: Something error with message

  /user/profile:
    get:
      tags:
        - User
      summary: Get information about myself
      description: Return a user profile
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          type: string
          description: `Bearer <token>`
      responses:
        "200":
          description: Get data successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              data:
                $ref: "#definitions/UserInfo"

  /user/update:
    patch:
      tags:
        - User
      summary: Update user profile
      description: Updates profile and returns a message
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          # required: true
          type: string
        - name: body
          in: body
          description: The body contain data to update
          schema:
            type: object
            properties:
              name:
                type: string
                description: Your name
              phone:
                type: string
                description: Your phone number
              address:
                type: string
                description: Your address
      responses:
        "200":
          description: Update successfully
          schema:
            type: object
            properties:
              message:
                type: string
                description: Just a message
                example: Update successfully
              user:
                $ref: "#definitions/UserInfo"
        "400":
          description: Error with a message
        
  /user/update-avatar:
    patch:
      tags:
        - User
      summary: Update user's avatar
      description: Update the avatar image of the current user.
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          description: `Bearer <token>`
          in: header
          type: string
          # required: true
        - name: avatar
          description: Image file
          in: formData
          type: file
          required: true
      responses:
        "200":
          description: Update avatar successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                description: true or false
                example: true
              message: 
                type: string
                description: Just a message
                example: Update successfully
              avatar:
                type: string
                example: New profile image url
        "400":
          description: Update failed with a message
        "401":
          description: Not authenticated

  /user/update-password:
    patch:
      tags:
        - User
      summary: Change password
      description: Return a success or failure message
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          description: `Bearer <token>`
          in: header
          type: string
          # required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              oldPassword:
                type: string
                description: Old password
                required: true
              newPassword:
                type: string
                description: New password
                required: true
              confirmNewPassword:
                type: string
                description: Confirm new password
                required: true
      responses:
        "200":
          description: "Update password successfully"
          schema:
            type: object
            properties:
              message: 
                type: string
                description: success message
                example: Update password successfully
        "400":
          description: Update failed with a message
        "401":
          description: Not authenticated            

  /user/create-admin:
    post:
      tags:
        - User
      summary: Create an admin account
      description: Creates and returns information about admin account with access token.
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          description: `Bearer <token>`
          in: header
          type: string
          # required: true
        - name: body
          in: body
          description: Content in request body
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of admin
                example: Van Lam
              email:
                type: string
                description: Email of admin
                format: email
              phone:
                type: string
                description: Phone number of admin
                example: "0988030845"
              password:
                type: string
                description: Password
              confirmPassword:
                type: string
                description: Confirm password
      responses:
        "201":
          description: Create admin account successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                description: Success or Failure
              message:
                type: string
                description: Success message
              data:
                $ref: "#definitions/UserInfo"
        "400":
          description: Create failed with a message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized



  # Book
  /book/create:
    post: 
      tags:
        - Book
      summary: Upload a book product
      description: Returns information about the book that has just been uploaded
      security:
        - Bearer: []
      consumes:
        - multipart/form-data
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: name
          in: formData
          description: The name of the book
          required: true
          type: string
        - name: publisher
          in: formData
          description: The name of publisher
          required: true
          type: string
        - name: categories
          in: formData
          description: A list of category ID.
          type: array
            items:
              type: string
          example: `["CategoryID 1", "CategoryID 2"]`
        - name: author
          in: formData
          description: The name of author
          type: string
          required: true
        - name: price
          in: formData
          type: integer
          description: Price of the book
          required: true
        - name: quantity
          in: formData
          type: integer
          description: The number of books are available
          required: true
        - name: description
          in: formData
          type: string
          description: Book description
          required: true
        - name: images
          in: formData
          type: array
          description: A list of image files
          items:
            type: file    
      responses:
        "201":
          description: Create a book successfully
          schema:
            type: object
            properties:
              status: 
                type: boolean
                description: Create successfully and returns true
              data:
                $ref: "#definitions/BookInfo"
        "400":
          description: Create failed with a error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        "500":
          description: Server Internal Error      

  /book/get:
    get:
      tags:
        - Book
      summary: Get a list of books
      description: Returns a list of book objects according to the conditions
      parameters:
        - name: sort_by
          in: query
          description: The field of type to sort. Valid values are: price, created-at, best-sellers.
          type: string
          enum: [price, best-sellers, created-at, rating]
          default: created-at
        - name: order_by
          in: query
          description: The order in which to sort books. Valid values are: asc and desc.
          type: string
          enum: [asc, desc]
          default: desc
        - name: min_price
          in: query
          description: The minimum price of books
          type: integer
          minimum: 0
          default: 0
        - name: max_price
          in: query
          description: The maximum price of books
          type: integer
          minimum: 0
        - name: category
          in: query
          description: Find book has this CategoryID
          type: string
        - name: limit
          in: query
          description: The maximum number of books to retrieve
          type: integer
          default: 24
        - name: frame
          in: query
          description: The page number to retrieve
          type: integer
          minimum: 1
          default: 1
      responses:
        "200":  
          description: Gets successfully and returns data
          schema:
            type: object
            properties:
              status:
                type: boolean
                description: Gets successfully and return true
              books:
                type: array
                items:
                  type: object
                  $ref: "#definitions/BookInfo"

  /book/get/{id}:
    get:
      tags:
        - Book
      summary: Query a book by ID
      description: Returns a book object
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          type: string
      responses:
        "200":
          description: Query successfully
          schema:
            type: object
            properties:
              status: 
                type: boolean
                description: true or false status
              message:
                type: string
                description: Success message
              data:
                $ref: "#definitions/BookInfo"
        "400":
          description: Query failed with a message
                
  /book/update:
    patch:
      tags:
        - Book
      summary: Update book
      description: Returns new book information
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: body
          in: body
          description: Data to update
          required: true
          schema:
            type: object
            properties:
              bookId: 
                type: string
                description: The book ID on the system
                required: true
                example: This is a book ID
              publisher:
                type: string
                description: The book's publisher
              description:
                type: string
                description: Book's description
              author:
                type: string
                description: The book's author
              price:
                type: integer
                description: Book's price
              quantity:
                type: integer
                description: The number of books are available
              categories:
                type: array
                description: The list of categoryIDs. Null value will not change
                items:
                  type: string
                  description: Category ID
                  example: "This is a category ID"
      responses:
        "200":
          description: Update successfully
                
  /book/delete/{id}:
    delete:
      tags:
        - Book
      summary: Delete a book by ID
      description: Returns status of delete request
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: id
          in: path
          description: Book ID
          type: string
          required: true
      responses:
        "200":
          description: Delete successfully an returns status true
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Deleted 1 books
        "400":
          description: Delete failed with an error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
     
  /book/search:
    post:
      tags:
        - Book
      summary: Search books by a string
      description: Search books
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              value:
                type: string
                description: String to search
              limit:
                type: integer
                description: The maximum books to retrieve
                default: 24
              frame:
                type: integer
                description: The page or frame to retrieve
                default: 1
      responses:
        "200":
          description: Oke
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
                example: Search OK     
              data:
                type: array
                items:
                  $ref: "#definitions/BookInfo"
        "400":
          description: Search failed
                
  # Category
  /category:
    get:
      tags:
        - Category
      summary: Gets a list categories
      description: Returns a list of categories. Default limit = 50 and frame = 1
      parameters:
        - name: limit
          in: query   
          type: integer
          description: The number of categories to retrieve
          minimum: 1
        - name: frame
          in: query
          type: integer
          minimum: 1
          description: The page number to retrieve
      responses:
        "200":
          description: Query successfully
          schema:
            type: object
            properties:
              message:
                type: string
                description: Success message
                example: Get categories successfully
              data:
                type: array
                description: A list of categories
                items:
                  $ref: "#definitions/CategoryInfo"
        "500":
          description: Server Internal Error

  /category/create:
    post:
      tags:
        - Category
      summary: Create a category
      description: Create and return information about the newly created category
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: body
          in: body
          required: true
          description: Data to create category
          schema:
            type: object
            properties:
              name:
                type: string
                description: The unique category name
                example: Shirt
              description:
                type: string
                description: Category description
                example: This is a description
      responses:
        "201":
          description: Create successfully
          schema:
            type: object
            properties:
              status: 
                type: boolean
                example: true
              message:
                type: string
                example: Create category successfully
              data:
                $ref: "#definitions/CategoryInfo"
        "400":
          description: Create failed with an error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        "500":
          description: Server Internal Error
        
  /category/update:
    patch:
      tags:
        - Category
      summary: Update category
      description: Update and return the new info
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          type: string
          description:  `Bearer <token>`
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              categoryId:
                type: string
                description: Category ID on the system
                required: true
              name:
                type: string
                description: New name
                required: true
              description:
                type: string
                description: New description
      responses:
        "200":
          description: Update successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Update category successfully
              data:
                $ref: "#definitions/CategoryInfo"
        "400":
          description: Update failed with error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        "500":
          description: Server Internal Error

  /category/delete/{id}:
    delete:
      tags:
        - Category
      summary: Delete a category by ID
      description: Delete a category by ID
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          type: string
          description: `Bearer <token>`
        - name: id
          in: path
          description: Category ID
          type: string
          required: true
      responses:
        "200":
          description: Delete category successfully
        "400":
          description: Delete failed with error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized

  # Order
  /order/create:
    post:
      tags:
        - Order
      summary: Create an order
      description: Create an order
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: body
          in: body
          description: Data to create an order
          schema:
            type: object
            properties:
              items:
                type: array
                description: An array contains objects.
                items:
                  type: object
                  properties:
                    productId:
                      type: string
                      description: Book ID
                    quantity:
                      type: integer
                      description: The number of products
                      minimum: 1
      responses:
        "201":
          description: Create an order successfully
          schema:
            $ref: "#definitions/OrderInfo"
        "400":
          description: Create failed with error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        "404":
          description: Products not found
                    
  /order/update-status:
    put:
      tags:
        - Order
      summary: Update order status
      description: Admin update status
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: body
          in: body
          required: true
          description: Data to update order status
          required: true
          schema:
            type: object
            properties:
              orderId:
                type: string
                description: Order ID
              status:
                type: string
                description: Status value will be updated
                enum: [Pending, Processing, Shipped, Delivered]
      responses:
        "200":
          description: Update successfully
        "400":
          description: Update failed with error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized

  /order:
    get:
      tags:
        - Order
      summary: Admin queries orders
      description: Admin can query orders
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          type: string
          description: `Bearer 'token'`
        - name: order_by
          in: query
          type: string
          enum: ["asc", "desc"]
          description: Sort by the time that order was created and order by 'asc' or 'desc'
        - name: limit
          in: query
          description: The number of orders to retrieve
          type: integer
          minimum: 1
        - name: frame
          in: query
          description: The frame or page to retrieve
          type: integer
          minimum: 1
        - name: pending
          in: query
          description: If this field has value is 'true' the query will return orders have status 'Pending'
          type: string
        - name: processing
          in: query
          description: If this field has value is 'true' the query will return orders have status 'Processing'
          type: string
        - name: Shipped
          in: query
          description: If this field has value is 'true' the query will return orders have status 'shipped'
          type: string
        - name: delivered
          in: query
          description: If this field has value is 'true' the query will return orders have status 'Delivered'
          type: string
      responses:
        "200":
          description: Query successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Query orders successfully
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The order ID
                    customer:
                      type: object
                      description: Information about user who created this order
                      properties:
                        _id: 
                          type: string
                          description: The user ID
                        name:
                          type: string
                          description: Name of the User
                        avatar:
                          type: string
                          description: Profile image url
                    items:
                      type: array
                      description: A list of products in this order
                      items:
                        type: object
                        properties:
                          product:
                            type: object
                            properties:
                              _id: 
                                type: string
                                description: The book ID
                              name:
                                type: string
                                description: Book description
                              price:
                                type: integer
                                description: The cost of each book
                          quantity:
                            type: integer
                            description: The number of books
                          cost:
                            type: integer
                            description: total cost of these books         
                    totalCost:
                      type: integer
                      description: total cost of this order
                    status:
                      type: string
                      description: Status of order
                    createdAt:
                      type: string
                      format: date-time
                      description: The time order was created
                    updatedAt:
                      type: string
                      format: date-time
                      description: The time order was updated      
        "400":
          description: Failure with an error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        
  /order/my-orders:
    get:
      tags:
        - Order
      summary: User queries orders
      description: Users can query orders of them
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          type: string
          description: `Bearer 'token'`
        - name: order_by
          in: query
          type: string
          enum: ["asc", "desc"]
          description: Sort by the time that order was created and order by 'asc' or 'desc'
        - name: limit
          in: query
          description: The number of orders to retrieve
          type: integer
          minimum: 1
        - name: frame
          in: query
          description: The frame or page to retrieve
          type: integer
          minimum: 1
        - name: pending
          in: query
          description: If this field has value is 'true' the query will return orders have status 'Pending'
          type: string
        - name: processing
          in: query
          description: If this field has value is 'true' the query will return orders have status 'Processing'
          type: string
        - name: Shipped
          in: query
          description: If this field has value is 'true' the query will return orders have status 'shipped'
          type: string
        - name: delivered
          in: query
          description: If this field has value is 'true' the query will return orders have status 'Delivered'
          type: string
      responses:
        "200":
          description: Query successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Query orders successfully
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The order ID
                    items:
                      type: array
                      description: A list of products in this order
                      items:
                        type: array
                        properties:
                          product:
                            type: object
                            properties:
                              _id: 
                                type: string
                                description: The book ID
                              name:
                                type: string
                                description: Book description
                              price:
                                type: integer
                                description: The cost of each book
                              images:
                                type: array
                                items:
                                  type: string
                                  description: Image URL
                          quantity:
                            type: integer
                            description: The number of books
                          cost:
                            type: integer
                            description: total cost of these books         
                    totalCost:
                      type: integer
                      description: total cost of this order
                    status:
                      type: string
                      description: Status of order
                    createdAt:
                      type: string
                      format: date-time
                      description: The time order was created
                    updatedAt:
                      type: string
                      format: date-time
                      description: The time order was updated 
        "400":
          description: Failure with an error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized

  /order/{orderId}:
    get:
      tags:
        - Order
      summary: Get detail information about an order
      description: Admin or user who created this order can do this action
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer 'token'`
          type: string
        - name: orderId
          in: path
          type: string
          description: The order ID
          required: true
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Query successfully
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: The order ID
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        _id: 
                          type: string
                          description: The book ID
                        name:
                          type: string
                          description: Book name
                        price:
                          type: integer
                          description: Price  
                        images:
                          type: array
                          items:
                            type: string
                            description: Image URL
                        quantity:
                          type: integer
                  totalCost:
                    type: integer
                    description: Order cost
                  status:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        "400":
          description: Failure with an error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        "404":
          description: Product is not found                  

  # Rating
  /rating:
    post:
      tags:
        - Rating
      summary: Rating a book that has been bought
      description: Review a book that has been successfully delivered 
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              bookId:
                type: string
                description: The book ID
                required: true
              rating:
                type: integer
                description: Rating point. 0 -> 5
                example: 5
                required: true
              comment:
                type: string
                description: comment
      responses:
        "201":
          description: Rate successfully
          schema:
            type: object
            properties:
              status: 
                type: boolean
                example: true
              message:
                type: string
                example: Rate successfully
              data:
                type: object
                properties:
                  _id: 
                    type: string
                    description: Rating ID
                  book: 
                    type: string
                    description: Book ID
                  rating:
                    type: integer
                    description: Rating point
                  comment:
                    type: string
                    description: Comment
                  ratingPoint:
                    type: integer
                    description: The average rating point of this book
                  numOfReivews:
                    type: integer
                    description: The number of rating this book
        "400":
          description: Rate failed with error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
        "500":
          description: Server Internal Error
      
  /rating/{bookId}:
    get:
      tags:
        - Rating
      summary: Query list of reviews about the book
      description: Return a list of reviews
      parameters:
        - name: bookId
          in: path
          type: string
          description: ID of the book you want to query for reviews
          required: true
        - name: limit
          in: query
          type: integer
          description: The maximum of reviews to retrieve. Default is 24
        - name: frame
          in: query
          type: integer
          description: The page or frame to retrieve. Default is 1
      responses:
        "200":
          description: Successfully
          schema:
            type: object
            properties:
              status: 
                type: boolean
                example: true
              message:
                type: string
                example: Get ratings successfully
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: ID of the review
                    rating:
                      type: integer
                      description: rating point
                      example: 5
                    comment:
                      type: string
                      description: Review content
                    customer:
                      type: object
                      properties:
                        _id: 
                          type: string
                          description: User ID
                        name:
                          type: string
                          description: The name of user
                        avatar:
                          type: string
                          description: The profile image of user
                    replies:
                      type: array
                      description: An array of reviews. Default 12 records
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: ID of the reply
                          comment:
                            type: string
                            description: Reply content
                          user:
                            type: object
                            properties:
                              _id: 
                                type: string
                                description: The user ID who wrote reply
                              name:
                                type: string
                                description: The name of User who wrote reply
                              avatar:
                                type: string
                                description: Profile image url of user who wrote reply
                    createdAt:
                      type: string
                      description: review creation time
                      format: date-time
        "400": 
          description: Query failed with a message

  /rating/reply/{ratingId}:
    post:
      tags:
        - Rating
      summary: Reply a review
      description: Admin or user who wrote this review can respond to this review
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer <token>`
          type: string
        - name: bookId
          required: true
          description: The book ID
          type: string
          in: path
        - name: body
          in: body
          required: true
          description: Content to create a reply
          schema:
            type: object
            properties:
              comment:
                type: string
                description: Write something to reply
      responses:
        "201":
          description: Reply successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message: 
                type: string
                example: reply successfully
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description:  Reply ID
                  comment: 
                    type: string
                    description: Content of reply
                  createdAt:
                    type: string
                    description: The reply time
                    format: date-time
        "400":
          description: Failure with an error message

  /rating/rely/{ratingId}:
    get:
      tags:
        - Rating
      summary: List of replies to a review
      description: A list of replies to a review. Default limit is 12. You can use parameters limit and frame.
      parameters:
        - name: ratingId
          in: path
          required: true
          description: The review ID which wants to query replies
        - name: limit
          in: query
          type: integer
          description: The maximum of reviews to retrieve. Default is 12
        - name: frame
          in: query
          type: integer
          description: The page or frame to retrieve. Default is 1
      responses:
        "200":
          description: Query successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Get replies successfully"
              data:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The reply ID
                    comment:
                      type: string
                      description: Reply content
                    user:
                      type: object
                      properties:
                        _id: 
                          type: string
                          description: The user ID
                        name:
                          type: string
                          description: The user's name
                        avatar:
                          type: string
                          description: User profile image url
                    createdAt:
                      type: string
                      description: The reply time
                      format: date-time
        "400":
          description: Failure with an error message

  /rating/update:
    patch:
      tags:
        - Rating
      summary: Update review       
      description: User who wrote the review can update this review
      security:
        - Bearer: []
      parameters:
        - name: Authorization
          in: header
          description: `Bearer 'token'`
          type: string
        - name: body
          in: body
          required: true
          description: Data to update review
          schema:
            type: object
            properties:
              ratingId:
                type: string
                required: true
                description: The rating ID
              comment:
                type: string
                description: New content of review
              rating:
                type: integer
                description: Star 0 -> 5
      responses:
        "200":
          description: Update successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Update successfully
              data:
                type: object
                properties:
                  _id:
                    type: string
                    description: The rating ID
                  book:
                    type: string
                    description: The ID of the book was reviewed
                  comment:
                    type: string
                    description: New review
                  ratingPoint:
                    type: number
                    description: The rating point of the book
                  numOfReivews:
                    type: integer
                    description: The number of reviews
        "400":
          description: Failure with an error message
        "401":
          description: Not authenticated    
        "403":
          description: Not authorized

  /rating/{ratingId}:
    delete:
      tags:
        - Rating
      summary: Delete a review
      definitions: Admin and who wrote this review can delete it.
      parameters:
        - name: Authorization
          in: header
          type: string
          description: `Bearer 'token'`   
        - name: ratingId
          in: path
          required: true
          type: string
          description: The rating ID you want to delete
      responses:
        "200":
          description: Delete successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Delete successfully
              data:
                type: object
                schema:
                  type: object
                  properties:
                    book:
                      type: string
                      description: The book ID
                    ratingPoint:
                      type: number
                      description: The rating point of the book
                    numOfReviews: 
                      type: integer
                      description: The number of reivews
        "400":
          description: Failure with an error message
        "401":
          description: Not authenticated
        "403":
          description: Not authorized   





          

definitions:
  UserInfo:
    type: object
    properties:
      _id:
        type: string
        description: The account ID on the system
      email:
        type: string
        format: email
        description: User's email
      phone:
        type: string
        description: Phone number
        example: "0988030845"
      name:
        type: string
        description: User's name
        example: Le Van Lam
      avatar:
        type: string
        description: Profile image url
      role:
        type: string
        description: User's role on system (admin, customer)
        example: admin
      createdAt:
        type: string
        format: date-time
        description: The time the account was created
      address:
        type: string
        description: User's address
        example: Ho Chi Minh City
  BookInfo:
    type: object
    properties:
      _id:
        type: string
        description: The book ID on the system
      name:
        type: string
        description: Book name
        example: C++ Basic
      publisher:
        type: string
        description: Publisher of the book
      author:
        type: string
        description: Author of the book
      price:
        type: integer
        description: Price of book
      quantity:
        type: integer
        description: The number of books are available
      ratingPoint:
        type: number
        description: The rating point
      numOfReivews: 
        type: integer
        description: The number of ratings
      createdAt: 
        type: string
        format: date-time
        description: The time which the book was created
      categories:
        type: array
        description: A list of categories
        items:
          type: object
          properties:
            _id: 
              type: string
              description: ID of category
            name:
              type: string
              description: Name of category
              example: Shirt
            description:
              type: string
              description: Category description
      images:
        type: array
        description: A list of image url
        items:
          type: string
          example: Image URL
  CategoryInfo:
    type: object
    properties:
      _id:
        type: string
        description: The category ID on the system
      name:
        type: string
        description: Category name
        example: Shirt
      description: 
        type: string
        description: Category description
        example: This is a shirt description
  OrderInfo:
    type: object
    properties:
      _id:
        type: string
        description: The order ID
      customer:
        type: string
        description: The customer ID
      items:
        type: array
        description: The list of object which has products
        items:
          type: object
          properties:
            product:
              type: object
              properties:
                _id:
                  type: string
                  description: The book ID
                name: 
                  type: string
                  description: Book name
                publisher:
                  type: string
                  description: Publisher of the book
                author: 
                  type: string
                  description: Author of the book
                description:
                  type: string
                  description: Book description
                price:
                  type: integer
                  description: Price of each book
            quantity:
              type: integer
              description: The number of books
            cost:
              type: integer
              description: Total cost of this book type
      totalCost:
        type: integer
        description: Total order cost
      status:
        type: string
        description: Status of order
      createdAt:
        type: string
        description: The time which order was created
        format: date-time
      updatedAt:
        type: string
        description: The time which order was updated
        format: date-time
